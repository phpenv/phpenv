#!/usr/bin/env bash
# Summary: List all PHP versions available to phpenv
# Usage: phpenv versions [--bare] [--skip-aliases]
#
# Lists all PHP versions found in `$PHPENV_ROOT/versions/*'.

set -e
[ -n "$PHPENV_DEBUG" ] && set -x

unset bare
unset skip_aliases
# Provide phpenv completions
for arg; do
  case "$arg" in
  --complete )
    echo --bare
    echo --skip-aliases
    exit ;;
  --bare ) bare=1 ;;
  --skip-aliases ) skip_aliases=1 ;;
  * )
    phpenv-help --usage versions >&2
    exit 1
    ;;
  esac
done

versions_dir="${PHPENV_ROOT}/versions"

if ! enable -f "${BASH_SOURCE%/*}"/phpenv-realpath.dylib realpath 2>/dev/null; then
  if [ -n "$PHPENV_NATIVE_EXT" ]; then
    echo "phpenv: failed to load \`realpath' builtin" >&2
    exit 1
  fi

  READLINK=$(type -p greadlink readlink | head -1)
  if [ -z "$READLINK" ]; then
    echo "phpenv: cannot find readlink - are you missing GNU coreutils?" >&2
    exit 1
  fi

  resolve_link() {
    $READLINK "$1"
  }

  realpath() {
    local cwd="$PWD"
    local path="$1"
    local name

    while [ -n "$path" ]; do
      name="${path##*/}"
      [ "$name" = "$path" ] || cd "${path%/*}"
      path="$(resolve_link "$name" || true)"
    done

    echo "${PWD}/$name"
    cd "$cwd"
  }
fi

if [ -d "$versions_dir" ]; then
  versions_dir="$(realpath "$versions_dir")"
fi

if [ -n "$bare" ]; then
  hit_prefix=""
  miss_prefix=""
  current_version=""
  include_system=""
else
  hit_prefix="* "
  miss_prefix="  "
  current_version="$(phpenv-version-name || true)"
  include_system="1"
fi

num_versions=0

print_version() {
  if [ "$1" == "$current_version" ]; then
    echo "${hit_prefix}$(phpenv-version 2>/dev/null)"
  else
    echo "${miss_prefix}$1"
  fi
  num_versions=$((num_versions + 1))
}

# Include "system" in the non-bare output, if it exists
if [ -n "$include_system" ] && PHPENV_VERSION=system phpenv-which php >/dev/null 2>&1; then
  print_version system
fi

shopt -s nullglob
for path in "$versions_dir"/*; do
  if [ -d "$path" ]; then
    if [ -n "$skip_aliases" ] && [ -L "$path" ]; then
      target="$(realpath "$path")"
      [ "${target%/*}" != "$versions_dir" ] || continue
    fi
    print_version "${path##*/}"
  fi
done
shopt -u nullglob

if [ "$num_versions" -eq 0 ] && [ -n "$include_system" ]; then
  echo "Warning: no PHP detected on the system" >&2
  exit 1
fi
